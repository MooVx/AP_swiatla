/*@!Encoding:1250*/
includes
{
   #include "const.cin"
}

variables
{
 msTimer mig;   //pedestrian blinking green lights timer 
 msTimer cycl;  //main cycle timer
 timer req;

  
 message Display panel;   //frame to display state on panel
 message Time t_msg;
 message Sensor sens;
 message CONTROL ctrl_msg;
  
 int state=0;

 int T[28]={1, 8, 4, 1, 3, 1, 0, 1, 1, 8, 3, 1, 1, 8, 3, 1, 1, 7, 4, 1, 1, 8, 3, 1, 1, 8, 3, 1};

 int adv_work=0;

int anim_multiplier =200;

}



on start
{   
  // first call of timers at simulatoin start:
  setTimer(cycl,100); 
  setTimer(mig,50); 
  ctrl_msg.byte(0)=0x11;  // 0b0001 0001  base_req & good signal
  output(ctrl_msg);
  
}


on message CONTROL
{
  ctrl_msg=this;
  if(this._ADV_REQUEST==1)
    adv_work=1; 
<<<<<<< HEAD
  if(this._OFF==1){
    off_blink=1;
    
  }else
    off_blink=0;
    
  setTimer(req,10); 
=======
>>>>>>> parent of 877af3f... działajacy system z niefajną logiką
  
}

on message Sensor
{
  sens=this;
}

on message Time
{
  t_msg=this;
  time_message_parser(this);
}



on timer req
{
  adv_work=0;
  ctrl_msg.byte(0)=0x04;   // 0b0000 0010  base_error
  output(ctrl_msg);
}

on timer mig
{ 
  if(state==F1_S3){     //E green light should blink 
    panel.E_G^=1;   // modify signal E_green in frame panel ( toggle - XOR func.)
    output(panel);  //send message over CAN
  };
  if(state==F4_S3){    //E&F green light should blink 
    panel.E_G^=1;   // modify signal E_green in frame panel ( toggle - XOR func.)
    panel.F_G^=1;   // modify signal F_green in frame panel ( toggle - XOR func.)
    output(panel);  //send message over CAN
  }
    
  setTimer(mig,100); //request 'mig' timer event after 100ms 
}



on timer cycl
{
<<<<<<< HEAD
  if(off_blink==0){
    if(adv_work==1){
      setTimer(cycl,anim_multiplier*T_stand[state]);  //request 'mig' timer event after 500*T[state] ms
      display_state(state);
      state=calc_state();
      if(state==F2_S1)
        state=calc_state();
    }
    else{ 
      setTimer(cycl,anim_multiplier*T_stand[state]);  //request 'mig' timer event after 500*T[state] ms
      display_state(state);
      state++;  
      if(state==28)
        state=F1_S1;
    }
        
    ctrl_msg.byte(0)=0x11;  // 0b0001 0001  base_req & good signal
    output(ctrl_msg);
=======
  if(adv_work==1 && ctrl_msg._OFF==0){
    state=calc_state();
    if(state==F2_S1)
      state=calc_state();
  }
  else{ 
    state++;  
    if(state==28)
      state=F1_S1;
  }
  
  setTimer(cycl,anim_multiplier*T_stand[state]);  //request 'mig' timer event after 500*T[state] ms
  display_state(state);
  
  ctrl_msg.byte(0)=0x11;  // 0b0001 0001  base_req & good signal
  output(ctrl_msg);
}

int calc_state()
{
if(state==F1_S3){
  if(T[state]>0)
    return F1_S4;
  else
    return F1_S5;
  
}else if((state == F1_S4)||(state == F1_S6)){
  if (t_msg.t_S2 > 0)
  	return F2_S1;
  else if (t_msg.t_S3 > 0)
  	return F3_S1;
  else if (sens.N_F1==1 || sens.N_F2==1 || sens.N_E1==1 || sens.N_E2==1)
  	return F4_S1;
  else if (t_msg.t_S5 > 0)
  	return F5_S1;
  else if (t_msg.t_S6 > 0)
  	return F6_S1;
  else
  	return F1_S1;
  
}else if(state == F2_S1){
  if(panel.A2_G&&panel.B2_G)
    return F2_S3;
  else
    return F2_S2;
  
}else if(state == F2_S2){
  return F2_S4;
  
}else if(state == F2_S6){
  if (t_msg.t_S3 > 0) 
  	return F3_S1;
  else if  (sens.N_F1==1 || sens.N_F2==1 || sens.N_E1==1 || sens.N_E2==1)
  	return F4_S1;
  else if  (t_msg.t_S5 > 0)	
  	return F5_S1;
  else if (t_msg.t_S6 > 0)
  	return F6_S1;
  else
  	return F2_S1;
}else if(state == F3_S4){
  if (sens.N_F1==1 || sens.N_F2==1 || sens.N_E1==1 || sens.N_E2==1)
  	return F4_S1;
  else if (t_msg.t_S5 > 0)
  	return F5_S1;
  else if (t_msg.t_S6 > 0)
  	return F6_S1;
  else if (t_msg.t_S1 > 0)
  	return F1_S1;
  else if (t_msg.t_S2 > 0)
  	return F2_S1;
  else
  	return F3_S1;

}else if(state == F4_S4){
  if (t_msg.t_S5 > 0)
  	return F5_S1;
  else if (t_msg.t_S6 > 0)
  	return F6_S1;
  else if (t_msg.t_S1 > 0)
  	return F1_S1;
  else if (t_msg.t_S2 > 0)
  	return F2_S1;
  else if (t_msg.t_S3 > 0)
  	return F3_S1;
  else
  	return F4_S1;
  
}else if(state == F5_S4){
  if (t_msg.t_S6 > 0)
  	return F6_S1;
  else if (t_msg.t_S1 > 0)
  	return F1_S1;
  else if (t_msg.t_S2 > 0)
  	return F2_S1;
  else if (t_msg.t_S3 > 0)
  	return F3_S1;
  else if (sens.N_F1==1 || sens.N_F2==1 || sens.N_E1==1 || sens.N_E2==1)
  	return F4_S1;
  else
  	return F5_S1;
  
}else if(state == F6_S4){
  if (t_msg.t_S1 > 0)
  	return F1_S1;
  else if (t_msg.t_S2 > 0)
  	return F2_S1;
  else if (t_msg.t_S3 > 0)
  	return F3_S1;
  else if (sens.N_F1==1 || sens.N_F2==1 || sens.N_E1==1 || sens.N_E2==1)
  	return F4_S1;
  else if (t_msg.t_S5 > 0)
  	return F5_S1;
  else
  	return F6_S1;

}else
  return state+1;

}

void time_message_parser(message Time th)
{
   int i=0,j=0;
  if((!th.t_S1)&&(!th.t_S2)&&(!th.t_S3)&&(!th.t_S4)&&(!th.t_S5)&&(!th.t_S6)){
    for(i=0;i<20;i++){
      T[i]=T_stand[i];
    }
>>>>>>> parent of 877af3f... działajacy system z niefajną logiką
  }
  else{
    T[F1_S2]=th.t_S1;
    T[F2_S4]=th.t_S2;
    T[F3_S2]=th.t_S3;
    T[F4_S2]=th.t_S4;
    T[F5_S2]=th.t_S5;
    T[F6_S2]=th.t_S6;
    

  }
<<<<<<< HEAD
  write("stan: %d",state);
}



=======
   write("Ustawiono czasy: S1:%d - S2:%d - S3:%d - S4:%d - S5:%d - S6:%d - ", T[F1_S2],
                                                                              T[F2_S4],
                                                                              T[F3_S2],
                                                                              T[F4_S2],
                                                                              T[F5_S2],
                                                                              T[F6_S2]);
}

void display_state(int state)
{
   int i=0,j=0;  
  //parser, byte after byte writing raw data from dis[state] to panel message
  for(i=0;i<=4;i++){
    int temp=0;
      for(j=0;j<8;j++){
        if((i*8+j)<34)
          if(dis[state][i*8+j])
               temp=temp|(1<<j);
          else
               temp=temp&~((1<<j));
      }
    panel.byte(i)=temp;
  }
  
  //send message 'panel' over CAN
  output(panel);
}
>>>>>>> parent of 877af3f... działajacy system z niefajną logiką
